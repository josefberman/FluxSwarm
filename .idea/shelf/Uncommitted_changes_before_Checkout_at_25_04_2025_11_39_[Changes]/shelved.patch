Index: RL.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import os\r\n\r\nimport gymnasium as gym\r\nfrom phi.flow import *\r\nimport phi.field as field\r\nfrom gymnasium import spaces\r\nfrom stable_baselines3.common.vec_env import VecEnv\r\n\r\nfrom data_structures import Simulation, Swarm, Fluid, Inflow\r\nfrom plotting import plot_save_current_step, plot_save_locations, plot_save_velocities, plot_save_rewards\r\nfrom simulation import step, sample_field_around_obstacle, sample_field_around_obstacle_4_points\r\nfrom stable_baselines3 import PPO, SAC\r\nfrom stable_baselines3.common.callbacks import ProgressBarCallback\r\n\r\n\r\nclass SwarmEnv(gym.Env):\r\n    \"\"\"\r\n    Custom Multi-Agent RL environment for swarm movement optimization.\r\n    \"\"\"\r\n    metadata = {\"render.modes\": [\"human\"]}\r\n\r\n    def __init__(self, sim: Simulation, swarm: Swarm, fluid: Fluid, inflow: Inflow, folder: str):\r\n        super(SwarmEnv, self).__init__()\r\n        self.sim = sim\r\n        self.swarm = swarm\r\n        self.fluid = fluid\r\n        self.inflow = inflow\r\n        self.current_time = 0.0\r\n        self.episode_time = 0.0\r\n        self.current_timestep = 0\r\n        self.folder = folder\r\n        self.rewards = []\r\n        box = Box['x,y', 0:sim.length_x, 0:sim.length_y]\r\n        boundary = {'x': ZERO_GRADIENT, 'y': 0}\r\n        self.v = StaggeredGrid(0, boundary=boundary, bounds=box, x=sim.resolution[0], y=sim.resolution[1])\r\n        self.p = None\r\n\r\n        # Define observation space: num_of_members * (position x2, velocity x2, pressure x4)\r\n        self.observation_space = spaces.Box(\r\n            low=-np.inf, high=np.inf, shape=(len(swarm.members), 8), dtype=np.float32\r\n        )\r\n\r\n        # Define action space (force control x2 for each agent)\r\n        self.action_space = spaces.Box(\r\n            low=-1.0, high=1.0, shape=(len(swarm.members), 2), dtype=np.float32\r\n        )\r\n\r\n    def reset(self, seed=None, options=None):\r\n        # self.current_time = 0\r\n        prev_members = self.swarm.members\r\n        self.swarm = Swarm(num_x=3, num_y=3, left_location=480, bottom_location=8.1, member_interval_x=6.3,\r\n                           member_interval_y=6.3, member_radius=1.8, member_density=5.150, member_max_force=100)\r\n        box = Box['x,y', 0:self.sim.length_x, 0:self.sim.length_y]\r\n        boundary = {'x': ZERO_GRADIENT, 'y': 0}\r\n        self.v = StaggeredGrid(0, boundary=boundary, bounds=box, x=self.sim.resolution[0], y=self.sim.resolution[1])\r\n        self.p = None\r\n        for i, member in enumerate(self.swarm.members):\r\n            member.previous_locations = prev_members[i].previous_locations.copy()\r\n            member.previous_velocities = prev_members[i].previous_velocities.copy()\r\n            member.previous_forces = prev_members[i].previous_forces.copy()\r\n        # reynolds = self.inflow.amplitude * self.sim.length_y / self.fluid.viscosity\r\n        # print(f'{reynolds=}')\r\n        self.episode_time = 0.0\r\n        return self._get_observation(), {}\r\n\r\n    def step(self, action):\r\n        \"\"\"Apply actions to swarm members and update the simulation.\"\"\"\r\n        if self.current_timestep % 10 == 0:\r\n            for i, member in enumerate(self.swarm.members):\r\n                acc_x = action[i, 0] * member.max_force / member.mass\r\n                acc_y = action[i, 1] * member.max_force / member.mass\r\n                member.velocity['x'] += acc_x * self.sim.dt\r\n                member.velocity['y'] += acc_y * self.sim.dt\r\n\r\n        # Advance the simulation\r\n        self.v, self.p, self.swarm = step(\r\n            v=self.v, p=self.p, inflow=self.inflow, sim=self.sim, swarm=self.swarm, fluid_obj=self.fluid,\r\n            t=self.episode_time\r\n        )\r\n\r\n        self.current_time += self.sim.dt\r\n        self.episode_time += self.sim.dt\r\n        self.current_timestep += 1\r\n        print('Step:', self.current_timestep)\r\n\r\n        # if self.v is not None:\r\n        #     if self.current_timestep % 5 == 0:\r\n        #         plot_save_current_step(current_time=self.current_time, folder_name=self.folder, v_field=self.v,\r\n        #                                p_field=self.p, sim=self.sim, swarm=self.swarm)\r\n        #         phi.field.write(self.v, f'../runs/run_{self.folder}/velocity/velocity_{self.current_time:.3f}')\r\n        #         phi.field.write(self.p, f'../runs/run_{self.folder}/pressure/pressure_{self.current_time:.3f}')\r\n\r\n        # Compute rewards\r\n        reward = self._compute_reward()\r\n        self.rewards.append(reward)\r\n        # done = self.current_time >= self.sim.total_time\r\n        done = self._compute_done()\r\n        # print(f'reward: {reward}, done: {done}.')\r\n\r\n        return self._get_observation(), reward, done, False, {}\r\n\r\n    def _get_observation(self):\r\n        \"\"\"Retrieve the current state of the swarm.\"\"\"\r\n        obs = []\r\n        for member in self.swarm.members:\r\n            if self.p is not None:\r\n                pressure_profile = sample_field_around_obstacle_4_points(f=self.p, member=member, sim=self.sim)\r\n            else:\r\n                pressure_profile = np.zeros(4, dtype=object)\r\n            obs.append([\r\n                member.location['x'], member.location['y'],\r\n                member.velocity['x'], member.velocity['y'],\r\n                *pressure_profile\r\n            ])\r\n        return np.array(obs, dtype=np.float32)\r\n\r\n    def _compute_done(self):\r\n        done = False\r\n        if self.v is None:\r\n            done = True\r\n        else:\r\n            for member in self.swarm.members:\r\n                if (member.location['x'] <= 200) or (member.location['x'] >= 550):\r\n                    done = True\r\n        return done\r\n\r\n    def _compute_reward(self):\r\n        \"\"\"Reward agents for traveling upstream.\"\"\"\r\n        reward = 0\r\n        if self.v is None:\r\n            reward = -20\r\n        else:\r\n            for i, member in enumerate(self.swarm.members):\r\n                if member.location['x'] < member.previous_locations[-2]['x']:\r\n                    reward += 1\r\n                else:\r\n                    reward -= 1\r\n                if member.location['x'] <= 200:\r\n                    reward = 20\r\n                if member.location['x'] >= 550:\r\n                    reward = -20\r\n        return reward\r\n\r\n    def render(self, mode='human'):\r\n        pass\r\n\r\n\r\ndef run_PPO(env: SwarmEnv | VecEnv, timesteps: int):\r\n    model = PPO('MlpPolicy', env, verbose=2, n_steps=32, device='cpu', gamma=0.95)\r\n    model.learn(total_timesteps=timesteps, progress_bar=True)\r\n    for env_i in range(env.num_envs):\r\n        model.save(f'../runs/run_{env.get_attr('folder')[env_i]}/swarm_rl_ppo')\r\n        os.makedirs(f'../runs/run_{env.get_attr('folder')[env_i]}/PPO/{env_i}', exist_ok=True)\r\n        plot_save_locations(folder_name=f'{env.get_attr('folder')[env_i]}/PPO/{env_i}', sim=env.get_attr('sim')[env_i],\r\n                            swarm=env.get_attr('swarm')[env_i])\r\n        plot_save_velocities(folder_name=f'{env.get_attr('folder')[env_i]}/PPO/{env_i}', sim=env.get_attr('sim')[env_i],\r\n                             swarm=env.get_attr('swarm')[env_i])\r\n        plot_save_rewards(folder_name=f'{env.get_attr('folder')[env_i]}/PPO/{env_i}',\r\n                          rewards=env.get_attr('rewards')[env_i], sim=env.get_attr('sim')[env_i])\r\n\r\n    # model.save(f'../runs/run_{env.folder}/swarm_rl_ppo')\r\n\r\n    # plot_save_locations(folder_name=f'{env.folder}/PPO', sim=env.sim, swarm=env.swarm)\r\n    # plot_save_velocities(folder_name=f'{env.folder}/PPO', sim=env.sim, swarm=env.swarm)\r\n    # plot_save_rewards(folder_name=f'{env.folder}/PPO', rewards=env.rewards, sim=env.sim)\r\n\r\n\r\ndef run_SAC(env: SwarmEnv):\r\n    model = SAC('MlpPolicy', env, verbose=2, device='cpu', gamma=0.95, tau=0.1)\r\n    model.learn(total_timesteps=env.sim.time_steps, progress_bar=True)\r\n    model.save(f'../runs/run_{env.folder}/swarm_rl_sac')\r\n\r\n    plot_save_locations(folder_name=f'{env.folder}/SAC', sim=env.sim, swarm=env.swarm)\r\n    plot_save_velocities(folder_name=f'{env.folder}/SAC', sim=env.sim, swarm=env.swarm)\r\n    plot_save_rewards(folder_name=f'{env.folder}/SAC', rewards=env.rewards, sim=env.sim)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/RL.py b/RL.py
--- a/RL.py	(revision 53b720a1a2c62c983fc092b4abc2ff3acdf83c09)
+++ b/RL.py	(date 1745568940903)
@@ -81,14 +81,14 @@
         self.current_time += self.sim.dt
         self.episode_time += self.sim.dt
         self.current_timestep += 1
-        print('Step:', self.current_timestep)
+        # print('Step:', self.current_timestep)
 
         # if self.v is not None:
         #     if self.current_timestep % 5 == 0:
         #         plot_save_current_step(current_time=self.current_time, folder_name=self.folder, v_field=self.v,
         #                                p_field=self.p, sim=self.sim, swarm=self.swarm)
-        #         phi.field.write(self.v, f'../runs/run_{self.folder}/velocity/velocity_{self.current_time:.3f}')
-        #         phi.field.write(self.p, f'../runs/run_{self.folder}/pressure/pressure_{self.current_time:.3f}')
+                # phi.field.write(self.v, f'../runs/run_{self.folder}/velocity/velocity_{self.current_time:.3f}')
+                # phi.field.write(self.p, f'../runs/run_{self.folder}/pressure/pressure_{self.current_time:.3f}')
 
         # Compute rewards
         reward = self._compute_reward()
@@ -146,7 +146,8 @@
 
 
 def run_PPO(env: SwarmEnv | VecEnv, timesteps: int):
-    model = PPO('MlpPolicy', env, verbose=2, n_steps=32, device='cpu', gamma=0.95)
+    model = PPO('MlpPolicy', env, verbose=2, n_steps=1, device='cpu', gamma=0.95,
+                tensorboard_log=f'../runs/run_{env.get_attr('folder')[0]}/swarm_rl_ppo_tb')
     model.learn(total_timesteps=timesteps, progress_bar=True)
     for env_i in range(env.num_envs):
         model.save(f'../runs/run_{env.get_attr('folder')[env_i]}/swarm_rl_ppo')
Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import datetime\r\nimport os\r\n\r\nfrom phi.flow import *\r\n# from phi.torch.flow import *\r\nimport numpy as np\r\nfrom stable_baselines3.common.env_util import make_vec_env\r\nfrom stable_baselines3.common.vec_env import SubprocVecEnv\r\n\r\nfrom plotting import animate_save_simulation, plot_save_locations, plot_save_rewards, plot_save_velocities\r\nfrom logs import create_run_name, create_folders_for_run, log_parameters\r\nfrom data_structures import Simulation, Swarm, Inflow, Fluid\r\nfrom RL import SwarmEnv, run_PPO, run_SAC\r\n\r\n# print(backend.default_backend().list_devices('GPU'))\r\n# print(backend.default_backend().list_devices('CPU'))\r\n# assert backend.default_backend().set_default_device('GPU')\r\nassert backend.default_backend().set_default_device('CPU')\r\n\r\n\r\ndef main():\r\n    # -------------- Parameter Definition -------------\r\n    # Simulation dimensions are length=mm and time=second, mass=mg\r\n    sim = Simulation(length_x=720, length_y=36, resolution=(1800, 90), dt=0.05, total_time=1000)\r\n    swarm = Swarm(num_x=3, num_y=3, left_location=480, bottom_location=8.1, member_interval_x=6.3, member_interval_y=6.3,\r\n                  member_radius=1.8, member_density=5.150, member_max_force=100)  # density in mg/mm^3, force in mg*mm/s^2\r\n    # max force 0.017 mg*mm/s^2\r\n    inflow = Inflow(frequency=2 * np.pi, amplitude=20, radius=sim.length_y / 2, center_y=sim.length_y / 2)\r\n    inflow.center_x = 0\r\n    fluid = Fluid(viscosity=0.89)  # viscosity of water in mg/(mm*s)\r\n\r\n    # -------------- Container Generation --------------\r\n    box = Box['x,y', 0:sim.length_x, 0:sim.length_y]\r\n\r\n    # ---- initial v and p Vector Field Generation ----\r\n    boundary = {'x': ZERO_GRADIENT, 'y': 0}\r\n    velocity_field = StaggeredGrid(0, boundary=boundary, bounds=box, x=sim.resolution[0], y=sim.resolution[1])\r\n\r\n    # ----------------- Calculation --------------------\r\n    folder_name = create_run_name()\r\n    create_folders_for_run(folder_name)\r\n    log_parameters(folder_name=folder_name, sim=sim, swarm=swarm, inflow=inflow, fluid=fluid)\r\n\r\n    # run_simulation(velocity_field=velocity_field, pressure_field=None, inflow=inflow, sim=sim,\r\n    #                swarm=swarm, fluid_obj=fluid, folder_name=folder_name)\r\n\r\n    # ------------ Reinforcement learning - Random ------------\r\n\r\n    # env = SwarmEnv(sim=sim, swarm=swarm, fluid=fluid, inflow=inflow, folder=folder_name)\r\n\r\n    # obs, _ = env.reset()\r\n    # for _ in range(int(sim.total_time / sim.dt)):\r\n    #     action = env.action_space.sample()\r\n    #     for i, member in enumerate(env.swarm.members):\r\n    #         member.previous_forces.append(action[i])\r\n    #     obs, reward, done, _, _ = env.step(action)\r\n\r\n    # ----------- Reinforcement Learning - PPO ------------------\r\n\r\n    os.environ[\"KMP_DUPLICATE_LIB_OK\"] = \"TRUE\"\r\n    def make_env():\r\n        return SwarmEnv(sim=sim, swarm=swarm, fluid=fluid, inflow=inflow, folder=folder_name)\r\n    # env = SwarmEnv(sim=sim, swarm=swarm, fluid=fluid, inflow=inflow, folder=folder_name)\r\n    env = SubprocVecEnv([make_env for _ in range(4)])\r\n    run_PPO(env, sim.time_steps)\r\n\r\n    # env = SwarmEnv(sim=sim, swarm=swarm, fluid=fluid, inflow=inflow, folder=folder_name)\r\n    # run_SAC(env)\r\n\r\n    # with open(f'../runs/run_{folder_name}/rewards.txt', 'w+') as f:\r\n    #     for i,r in enumerate(env.rewards):\r\n    #         f.write(f'{str(i)},{str(r)}\\n')\r\n\r\n    # ----------------- Animation --------------------\r\n    # animate_save_simulation(sim=env.sim, swarm=env.swarm, folder_name=env.folder, inflow=env.inflow)\r\n\r\nif __name__ == '__main__':\r\n    from multiprocessing import freeze_support\r\n    freeze_support()\r\n    main()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision 53b720a1a2c62c983fc092b4abc2ff3acdf83c09)
+++ b/main.py	(date 1745568740921)
@@ -21,7 +21,7 @@
 def main():
     # -------------- Parameter Definition -------------
     # Simulation dimensions are length=mm and time=second, mass=mg
-    sim = Simulation(length_x=720, length_y=36, resolution=(1800, 90), dt=0.05, total_time=1000)
+    sim = Simulation(length_x=720, length_y=36, resolution=(1800, 90), dt=0.05, total_time=1)
     swarm = Swarm(num_x=3, num_y=3, left_location=480, bottom_location=8.1, member_interval_x=6.3, member_interval_y=6.3,
                   member_radius=1.8, member_density=5.150, member_max_force=100)  # density in mg/mm^3, force in mg*mm/s^2
     # max force 0.017 mg*mm/s^2
@@ -61,7 +61,8 @@
     def make_env():
         return SwarmEnv(sim=sim, swarm=swarm, fluid=fluid, inflow=inflow, folder=folder_name)
     # env = SwarmEnv(sim=sim, swarm=swarm, fluid=fluid, inflow=inflow, folder=folder_name)
-    env = SubprocVecEnv([make_env for _ in range(4)])
+    num_envs = 6
+    env = SubprocVecEnv([make_env for _ in range(num_envs)])
     run_PPO(env, sim.time_steps)
 
     # env = SwarmEnv(sim=sim, swarm=swarm, fluid=fluid, inflow=inflow, folder=folder_name)
Index: plotting.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import matplotlib as mpl\r\nimport matplotlib.pyplot as plt\r\nimport matplotlib.animation as animation\r\nimport numpy as np\r\nimport pandas as pd\r\nfrom phi.flow import *\r\nfrom data_structures import Simulation, Swarm, Inflow\r\nfrom glob import glob\r\nfrom scipy.signal import savgol_filter\r\nfrom auxiliary import TO_MMHG, trapezoidal_waveform\r\n\r\n\r\ndef plot_scalar_field(field, ax, length_x, length_y, title):\r\n    max_magnitude = np.max(np.abs(field.numpy()))\r\n    im = ax.imshow(field.numpy().T, origin='lower', cmap='coolwarm_r', extent=[0, length_x, 0, length_y], aspect=2,\r\n                   vmin=-max_magnitude, vmax=max_magnitude, zorder=1)\r\n    ax.set_title(title)\r\n    return im\r\n\r\n\r\ndef plot_save_current_step(current_time: float, folder_name: str, v_field: Field, p_field: Field,\r\n                           sim: Simulation, swarm: Swarm) -> None:\r\n    fig, axes = plt.subplots(3, 1, figsize=(20, 10))\r\n    fields = [v_field['x'], v_field['y'], p_field * TO_MMHG]\r\n    field_names = [u'Velocity - x component [mm/s]', u'Velocity = y component [mm/s]', 'Pressure [mmHg]']\r\n    ax_handlers = []\r\n    for i in range(0, 3):\r\n        ax_handlers.append(plot_scalar_field(field=fields[i], ax=axes[i], length_x=sim.length_x, length_y=sim.length_y,\r\n                                             title=field_names[i]))\r\n        fig.colorbar(ax_handlers[-1], ax=axes[i], orientation='vertical', pad=0.04, fraction=0.02)\r\n        for member in swarm.members:\r\n            axes[i].add_patch(plt.Circle((member.location['x'], member.location['y']), member.radius, color='k'))\r\n        # for _x in np.arange(0, sim.length_x, sim.dx):\r\n        #     axes[i].axvline(_x, c='k', linewidth=0.1, alpha=0.5)\r\n        # for _y in np.arange(0, sim.length_y, sim.dy):\r\n        #     axes[i].axhline(_y, c='k', linewidth=0.1, alpha=0.5)\r\n    plt.suptitle(f'Simulation time: {current_time:.2f} seconds', fontweight='bold')\r\n    plt.tight_layout()\r\n    plt.savefig(f'../runs/run_{folder_name}/figures/timestep_{current_time:.3f}.jpg', dpi=300)\r\n    plt.close(fig)\r\n    return None\r\n\r\n\r\ndef plot_save_locations(folder_name: str, sim: Simulation, swarm: Swarm):\r\n    data_dict = {'timestep': np.linspace(start=sim.dt, stop=sim.total_time + sim.dt,\r\n                                         num=len(swarm.members[0].previous_locations))}\r\n    for i, member in enumerate(swarm.members):\r\n        data_dict[f'location_{i}_x'] = [item['x'] for item in member.previous_locations]\r\n        data_dict[f'location_{i}_y'] = [item['y'] for item in member.previous_locations]\r\n    pd.DataFrame(data_dict).to_csv(f'../runs/run_{folder_name}/locations.csv')\r\n    fig, axes = plt.subplots(nrows=2, ncols=1, figsize=(20, 10))\r\n    list_of_member_locations = []\r\n    for member in swarm.members:\r\n        axes[0].plot(np.linspace(start=sim.dt, stop=sim.total_time + sim.dt, num=len(member.previous_locations)),\r\n                     [item['x'] for item in member.previous_locations], c='#bbbbbb')\r\n        list_of_member_locations.append(member.previous_locations)\r\n    average_dict = [{'x': sum(d['x'] for d in g) / len(g), 'y': sum(d['y'] for d in g) / len(g)} for g in\r\n                    zip(*list_of_member_locations)]\r\n    axes[0].plot(np.linspace(start=sim.dt, stop=sim.total_time + sim.dt, num=len(average_dict)),\r\n                 [item['x'] for item in average_dict], c='k')\r\n    axes[0].set_title('x locations', fontweight='bold')\r\n    axes[0].set_xlabel('Time [s]')\r\n    axes[0].set_ylabel('Location [mm]')\r\n    axes[0].set_ylim(0, sim.length_x)\r\n    for member in swarm.members:\r\n        axes[1].plot(np.linspace(start=sim.dt, stop=sim.total_time + sim.dt, num=len(member.previous_locations)),\r\n                     [item['y'] for item in member.previous_locations], c='#bbbbbb')\r\n    axes[1].plot(np.linspace(start=sim.dt, stop=sim.total_time + sim.dt, num=len(average_dict)),\r\n                 [item['y'] for item in average_dict], c='k')\r\n    axes[1].set_title('y locations', fontweight='bold')\r\n    axes[1].set_xlabel('Time [s]')\r\n    axes[1].set_ylabel('Location [mm]')\r\n    axes[1].set_ylim(0, sim.length_y)\r\n    plt.tight_layout()\r\n    plt.savefig(f'../runs/run_{folder_name}/locations.jpg', dpi=300)\r\n\r\n\r\ndef plot_save_velocities(folder_name: str, sim: Simulation, swarm: Swarm):\r\n    data_dict = {'timestep': np.linspace(start=sim.dt, stop=sim.total_time + sim.dt,\r\n                                         num=len(swarm.members[0].previous_velocities))}\r\n    for i, member in enumerate(swarm.members):\r\n        data_dict[f'velocity_{i}_x'] = [item['x'] for item in member.previous_velocities]\r\n        data_dict[f'velocity_{i}_y'] = [item['y'] for item in member.previous_velocities]\r\n    pd.DataFrame(data_dict).to_csv(f'../runs/run_{folder_name}/velocities.csv')\r\n    fig, axes = plt.subplots(nrows=2, ncols=1, figsize=(20, 10))\r\n    list_of_member_velocities = []\r\n    for member in swarm.members:\r\n        axes[0].plot(np.linspace(start=sim.dt, stop=sim.total_time + sim.dt, num=len(member.previous_locations)),\r\n                     [item['x'] for item in member.previous_velocities], c='#bbbbbb')\r\n        list_of_member_velocities.append(member.previous_velocities)\r\n    average_dict = [{'x': sum(d['x'] for d in g) / len(g), 'y': sum(d['y'] for d in g) / len(g)} for g in\r\n                    zip(*list_of_member_velocities)]\r\n    axes[0].plot(np.linspace(start=sim.dt, stop=sim.total_time + sim.dt, num=len(average_dict)),\r\n                 [item['x'] for item in average_dict], c='k')\r\n    axes[0].set_title('x velocities', fontweight='bold')\r\n    axes[0].set_xlabel('Time [s]')\r\n    axes[0].set_ylabel('Velocity [mm/s]')\r\n    for member in swarm.members:\r\n        axes[1].plot(np.linspace(start=sim.dt, stop=sim.total_time + sim.dt, num=len(member.previous_locations)),\r\n                     [item['y'] for item in member.previous_velocities], c='#bbbbbb')\r\n    axes[1].plot(np.linspace(start=sim.dt, stop=sim.total_time + sim.dt, num=len(average_dict)),\r\n                 [item['y'] for item in average_dict], c='k')\r\n    axes[1].set_title('y velocities', fontweight='bold')\r\n    axes[1].set_xlabel('Time [s]')\r\n    axes[1].set_ylabel('Velocity [mm/s]')\r\n    plt.tight_layout()\r\n    plt.savefig(f'../runs/run_{folder_name}/velocities.jpg', dpi=300)\r\n\r\n\r\ndef plot_save_rewards(folder_name: str, rewards: list, sim: Simulation):\r\n    pd.DataFrame({'timestep': np.linspace(start=sim.dt, stop=sim.total_time + sim.dt, num=len(rewards)),\r\n                  'reward': rewards}).to_csv(f'../runs/run_{folder_name}/rewards.csv')\r\n    fig, axes = plt.subplots(nrows=2, ncols=1, figsize=(20, 10))\r\n    axes[0].plot(np.linspace(start=sim.dt, stop=sim.total_time + sim.dt, num=len(rewards)), np.cumsum(rewards), c='k')\r\n    axes[0].set_title('Cumulative reward', fontweight='bold')\r\n    axes[0].set_xlabel('Time [s]')\r\n    axes[0].set_ylabel('Cumulative reward')\r\n    axes[1].plot(np.linspace(start=sim.dt, stop=sim.total_time + sim.dt, num=len(rewards)), rewards, c='k')\r\n    axes[1].set_title('Step reward', fontweight='bold')\r\n    axes[1].set_xlabel('Time [s]')\r\n    axes[1].set_ylabel('Step reward')\r\n    plt.tight_layout()\r\n    plt.savefig(f'../runs/run_{folder_name}/rewards.jpg', dpi=300)\r\n\r\n\r\ndef create_animation_frame_row(fig: plt.Figure, axis, sim: Simulation, swarm: Swarm, imshow_data: np.ndarray,\r\n                               plot_data: np.ndarray, max_abs_value: float, title: str, x_label: str, y_label: str):\r\n    im_handler = axis[0].imshow(imshow_data, origin='lower', cmap='coolwarm_r', vmin=-max_abs_value, vmax=max_abs_value,\r\n                                extent=[0, sim.length_x, 0, sim.length_y], aspect=4, zorder=1)\r\n    axis[0].plot([0, sim.length_x], [int(sim.length_y / 2), int(sim.length_y / 2)], c='k', linestyle='dashed', zorder=2)\r\n    member_patches = []\r\n    for member in swarm.members:\r\n        member_patches.append(axis[0].add_patch(\r\n            plt.Circle((member.previous_locations[0]['x'], member.previous_locations[0]['y']), member.radius,\r\n                       color='k', zorder=3)))\r\n    fig.colorbar(im_handler, ax=axis[0], orientation='vertical', pad=0.04, fraction=0.02)\r\n    axis[0].set_title(title, fontweight='bold')\r\n    plot_handler, = axis[1].plot(np.linspace(0, sim.length_x, sim.resolution[0]), plot_data, c='k')\r\n    axis[1].set_xlabel(x_label)\r\n    axis[1].set_ylabel(y_label)\r\n    axis[1].set_ylim(-max_abs_value, max_abs_value)\r\n    return im_handler, plot_handler, member_patches\r\n\r\n\r\ndef animate_save_simulation(sim: Simulation, swarm: Swarm, inflow: Inflow, folder_name: str) -> None:\r\n    velocity_file_list = sorted(glob(f'../runs/run_{folder_name}/velocity/*.npz'))\r\n    pressure_file_list = sorted(glob(f'../runs/run_{folder_name}/pressure/*.npz'))\r\n    velocity_data = [np.load(file) for file in velocity_file_list]\r\n    pressure_data = [np.load(file) for file in pressure_file_list]\r\n    max_abs_velocity_x = np.max(np.abs([file['data'][:, :, 0] for file in velocity_data]))\r\n    max_abs_velocity_y = np.max(np.abs([file['data'][:, :, 1] for file in velocity_data]))\r\n    max_abs_pressure = np.max(np.abs([file['data'] for file in pressure_data]))\r\n    fig, ax = plt.subplots(nrows=3, ncols=2, figsize=(15, 10), gridspec_kw={'width_ratios': [3, 1]})\r\n    v_x_h = create_animation_frame_row(fig=fig, axis=ax[0], sim=sim, swarm=swarm,\r\n                                       imshow_data=velocity_data[0]['data'][:, :, 0].T,\r\n                                       plot_data=savgol_filter(velocity_data[0]['data'][:-1,\r\n                                                               int(sim.resolution[1] / 2), 0], 100, 5),\r\n                                       max_abs_value=max_abs_velocity_x, title=u'Velocity - x component',\r\n                                       x_label='Tube length [mm]', y_label='Velocity [mm/s]')\r\n    v_y_h = create_animation_frame_row(fig=fig, axis=ax[1], sim=sim, swarm=swarm,\r\n                                       imshow_data=velocity_data[0]['data'][:, :, 1].T,\r\n                                       plot_data=savgol_filter(velocity_data[0]['data'][:-1,\r\n                                                               int(sim.resolution[1] / 2), 1], 100,\r\n                                                               5), max_abs_value=max_abs_velocity_y,\r\n                                       title=u'Velocity = y component', x_label='Tube length [mm]',\r\n                                       y_label='Velocity [mm/s]')\r\n    p_h = create_animation_frame_row(fig=fig, axis=ax[2], sim=sim, swarm=swarm,\r\n                                     imshow_data=pressure_data[0]['data'].T * TO_MMHG,\r\n                                     plot_data=savgol_filter(pressure_data[0]['data'][:,\r\n                                                             int(sim.resolution[1] / 2)], 100, 5) * TO_MMHG,\r\n                                     max_abs_value=max_abs_pressure * TO_MMHG, title='Pressure',\r\n                                     x_label='Tube length [mm]', y_label='Pressure [mmHg]')\r\n    inflow_mag = trapezoidal_waveform(t=sim.dt, a=inflow.amplitude, tau=2, h=1.5, v=inflow.amplitude / 2)\r\n    fig.suptitle(f'Simulation time: {sim.dt} seconds.\\nInflow: {inflow_mag:.2f} mm/s')\r\n    plt.tight_layout()\r\n\r\n    def update(frame):\r\n        v_x_h[0].set_data(velocity_data[frame]['data'][:, :, 0].T)\r\n        v_y_h[0].set_data(velocity_data[frame]['data'][:, :, 1].T)\r\n        p_h[0].set_data(pressure_data[frame]['data'].T * TO_MMHG)\r\n        v_x_h[1].set_ydata(\r\n            savgol_filter(velocity_data[frame]['data'][:-1, int(sim.resolution[1] / 2), 0], 100, 1))\r\n        v_y_h[1].set_ydata(\r\n            savgol_filter(velocity_data[frame]['data'][:-1, int(sim.resolution[1] / 2), 1], 100, 1))\r\n        p_h[1].set_ydata(\r\n            savgol_filter(pressure_data[frame]['data'][:, int(sim.resolution[1] / 2)] * TO_MMHG, 100, 1))\r\n        for i, member in enumerate(swarm.members):\r\n            v_x_h[2][i].center = member.previous_locations[frame]['x'], member.previous_locations[frame]['y']\r\n            v_y_h[2][i].center = member.previous_locations[frame]['x'], member.previous_locations[frame]['y']\r\n            p_h[2][i].center = member.previous_locations[frame]['x'], member.previous_locations[frame]['y']\r\n        inflow_mag = trapezoidal_waveform(t=frame * sim.dt * 5, a=inflow.amplitude, tau=2, h=1.5,\r\n                                          v=inflow.amplitude / 2)\r\n        fig.suptitle(f'Simulation time: {frame * sim.dt * 5:.2f} seconds.\\nInflow: {inflow_mag:.2f} mm/s')\r\n        return [v_x_h[0], v_y_h[0], p_h[0], v_x_h[1], v_y_h[1], p_h[1], *v_x_h[2], *v_y_h[2], *p_h[2]]\r\n\r\n    mpl.rcParams['animation.ffmpeg_path'] = r\"C:\\Users\\assaf\\ffmpeg\\ffmpeg-7.1-essentials_build\\bin\\ffmpeg.exe\"\r\n    ffmpeg_writer = animation.FFMpegWriter(fps=10, codec='h264', bitrate=-1)\r\n    ani = animation.FuncAnimation(fig, update, frames=len(pressure_data), blit=True, repeat=False)\r\n    ani.save(f'../runs/run_{folder_name}/animation_fast.mp4', ffmpeg_writer, dpi=200)\r\n    ffmpeg_writer = animation.FFMpegWriter(fps=1, codec='h264', bitrate=-1)\r\n    ani = animation.FuncAnimation(fig, update, frames=len(pressure_data), blit=True, repeat=False)\r\n    ani.save(f'../runs/run_{folder_name}/animation_slow.mp4', ffmpeg_writer, dpi=200)\r\n    # ani.save(f'./run_{folder_name}/animation_slow.gif', writer='pillow', fps=1, dpi=300)\r\n    # ani.save(f'./run_{folder_name}/animation_fast.gif', writer='pillow', fps=10, dpi=300)\r\n    return None\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/plotting.py b/plotting.py
--- a/plotting.py	(revision 53b720a1a2c62c983fc092b4abc2ff3acdf83c09)
+++ b/plotting.py	(date 1745568609124)
@@ -22,7 +22,7 @@
                            sim: Simulation, swarm: Swarm) -> None:
     fig, axes = plt.subplots(3, 1, figsize=(20, 10))
     fields = [v_field['x'], v_field['y'], p_field * TO_MMHG]
-    field_names = [u'Velocity - x component [mm/s]', u'Velocity = y component [mm/s]', 'Pressure [mmHg]']
+    field_names = [u'Velocity - x component [mm/s]', u'Velocity - y component [mm/s]', 'Pressure [mmHg]']
     ax_handlers = []
     for i in range(0, 3):
         ax_handlers.append(plot_scalar_field(field=fields[i], ax=axes[i], length_x=sim.length_x, length_y=sim.length_y,
Index: .idea/phiflow_sim.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"PYTHON_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\">\r\n    <content url=\"file://$MODULE_DIR$\">\r\n      <excludeFolder url=\"file://$MODULE_DIR$/run_2024-10-19_10-32-55\" />\r\n      <excludeFolder url=\"file://$MODULE_DIR$/run_2024-10-19_23-58-39\" />\r\n      <excludeFolder url=\"file://$MODULE_DIR$/run_2024-10-7_20-29-2_keep\" />\r\n      <excludeFolder url=\"file://$MODULE_DIR$/run_2024-10-30_21-55-13_keep\" />\r\n      <excludeFolder url=\"file://$MODULE_DIR$/venv\" />\r\n    </content>\r\n    <orderEntry type=\"jdk\" jdkName=\"phiflow\" jdkType=\"Python SDK\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/phiflow_sim.iml b/.idea/phiflow_sim.iml
--- a/.idea/phiflow_sim.iml	(revision 53b720a1a2c62c983fc092b4abc2ff3acdf83c09)
+++ b/.idea/phiflow_sim.iml	(date 1745566109305)
@@ -7,8 +7,9 @@
       <excludeFolder url="file://$MODULE_DIR$/run_2024-10-7_20-29-2_keep" />
       <excludeFolder url="file://$MODULE_DIR$/run_2024-10-30_21-55-13_keep" />
       <excludeFolder url="file://$MODULE_DIR$/venv" />
+      <excludeFolder url="file://$MODULE_DIR$/.venv" />
     </content>
-    <orderEntry type="jdk" jdkName="phiflow" jdkType="Python SDK" />
+    <orderEntry type="jdk" jdkName="Python 3.13 (microswarm_simple)" jdkType="Python SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
 </module>
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"011fd143-0d4d-4ffe-82c4-bf547896fdff\" name=\"Changes\" comment=\"PPO and SAC implementation\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/RL.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/RL.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/main.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/main.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/plotting.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/plotting.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/simulation.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/simulation.py\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"Aorta\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n    <option name=\"RESET_MODE\" value=\"HARD\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;josefberman&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/assafberman/microswarm_simple.git&quot;,\r\n    &quot;accountId&quot;: &quot;fe1d4a85-0f4d-4153-9af0-2f99e14cdc9f&quot;\r\n  }\r\n}</component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 6\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2l3RnqgXwcP6L1QoahlIxxiqjOw\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"Python.main.executor\": \"Run\",\r\n    \"Python.trial.executor\": \"Run\",\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"RunOnceActivity.git.unshallow\": \"true\",\r\n    \"git-widget-placeholder\": \"master\",\r\n    \"last_opened_file_path\": \"D:/PycharmProjects\",\r\n    \"node.js.detected.package.eslint\": \"true\",\r\n    \"node.js.detected.package.tslint\": \"true\",\r\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\r\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\r\n    \"nodejs_package_manager_path\": \"npm\",\r\n    \"settings.editor.selected.configurable\": \"com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable\",\r\n    \"vue.rearranger.settings.migration\": \"true\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\Thesis\\phiflow_sim\\trial_1\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"main\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\r\n      <module name=\"phiflow_sim\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/main.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-js-predefined-d6986cc7102b-f27c65a3e318-JavaScript-PY-251.23774.444\" />\r\n        <option value=\"bundled-python-sdk-890ed5b35930-d9c5bdb153f4-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-251.23774.444\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"011fd143-0d4d-4ffe-82c4-bf547896fdff\" name=\"Changes\" comment=\"\" />\r\n      <created>1724406942934</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1724406942934</updated>\r\n      <workItem from=\"1745559679201\" duration=\"3708000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Initial commit\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1724407810090</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1724407810090</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Radial constant inflow\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1724875604415</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1724875604415</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Aorta parameters\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1725190842053</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1725190842053</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"Capillary parameters\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1725191042664</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1725191042664</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"Capillary parameters\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1725196190437</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1725196190437</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Capillary parameters\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1726245687173</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1726245687173</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"Organized project\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1726305644084</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1726305644084</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"Organized project\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1726346447524</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1726346447524</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"Organized project\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1726903640267</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1726903640267</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"Organized project\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1726918706835</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1726918706835</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"Capillary properties\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727541523078</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727541523078</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"Capillary properties\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727954234145</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727954234145</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"Capillary properties\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1728108842360</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1728108842360</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"Capillary constant uniform inflow\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1728185495358</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1728185495358</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"Capillary um, s, ug\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1728735654006</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1728735654006</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"Capillary two-way coupling with swarm\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1728748855725</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1728748855725</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"Capillary two-way coupling with swarm\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1729094117253</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1729094117253</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"Capillary two-way coupling with swarm with rotation\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1729349778055</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1729349778055</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"Capillary two-way coupling with swarm with rotation\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1735893263827</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1735893263827</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"Centered Grid\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1736838652320</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1736838652320</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00021\" summary=\"Working flow\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1737975769032</created>\r\n      <option name=\"number\" value=\"00021\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1737975769032</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00022\" summary=\"No impact implementation\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1739002287826</created>\r\n      <option name=\"number\" value=\"00022\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1739002287826</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00023\" summary=\"Impact implementation and basic RL\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1739521855540</created>\r\n      <option name=\"number\" value=\"00023\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00023\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1739521855540</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00024\" summary=\"Episode reset on divergence\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1739550702342</created>\r\n      <option name=\"number\" value=\"00024\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00024\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1739550702342</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00025\" summary=\"Episode reset on divergence\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1739646428092</created>\r\n      <option name=\"number\" value=\"00025\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00025\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1739646428092</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00026\" summary=\"Episode reset on divergence\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1740155249878</created>\r\n      <option name=\"number\" value=\"00026\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00026\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1740155249878</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00027\" summary=\"PPO and SAC implementation\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1743863977559</created>\r\n      <option name=\"number\" value=\"00027\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00027\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1743863977559</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00028\" summary=\"PPO and SAC implementation\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1744736056396</created>\r\n      <option name=\"number\" value=\"00028\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00028\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1744736056396</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"29\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State>\r\n              <option name=\"FILTERS\">\r\n                <map>\r\n                  <entry key=\"branch\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"Capillary\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </State>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Initial commit\" />\r\n    <MESSAGE value=\"Radial constant inflow\" />\r\n    <MESSAGE value=\"Aorta parameters\" />\r\n    <MESSAGE value=\"Capillary parameters\" />\r\n    <MESSAGE value=\"Organized project\" />\r\n    <MESSAGE value=\"Capillary properties\" />\r\n    <MESSAGE value=\"Capillary constant uniform inflow\" />\r\n    <MESSAGE value=\"Capillary um, s, ug\" />\r\n    <MESSAGE value=\"Capillary two-way coupling with swarm\" />\r\n    <MESSAGE value=\"Capillary two-way coupling with swarm with rotation\" />\r\n    <MESSAGE value=\"Centered Grid\" />\r\n    <MESSAGE value=\"Working flow\" />\r\n    <MESSAGE value=\"No impact implementation\" />\r\n    <MESSAGE value=\"Impact implementation and basic RL\" />\r\n    <MESSAGE value=\"Episode reset on divergence\" />\r\n    <MESSAGE value=\"PPO and SAC implementation\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"PPO and SAC implementation\" />\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/phiflow_sim$main.coverage\" NAME=\"main Coverage Results\" MODIFIED=\"1745563192085\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 53b720a1a2c62c983fc092b4abc2ff3acdf83c09)
+++ b/.idea/workspace.xml	(date 1745568940931)
@@ -5,11 +5,12 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="011fd143-0d4d-4ffe-82c4-bf547896fdff" name="Changes" comment="PPO and SAC implementation">
+      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/phiflow_sim.iml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/phiflow_sim.iml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/RL.py" beforeDir="false" afterPath="$PROJECT_DIR$/RL.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/main.py" beforeDir="false" afterPath="$PROJECT_DIR$/main.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/plotting.py" beforeDir="false" afterPath="$PROJECT_DIR$/plotting.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/simulation.py" beforeDir="false" afterPath="$PROJECT_DIR$/simulation.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -55,24 +56,24 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "Python.main.executor": "Run",
-    "Python.trial.executor": "Run",
-    "RunOnceActivity.OpenProjectViewOnStart": "true",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "RunOnceActivity.git.unshallow": "true",
-    "git-widget-placeholder": "master",
-    "last_opened_file_path": "D:/PycharmProjects",
-    "node.js.detected.package.eslint": "true",
-    "node.js.detected.package.tslint": "true",
-    "node.js.selected.package.eslint": "(autodetect)",
-    "node.js.selected.package.tslint": "(autodetect)",
-    "nodejs_package_manager_path": "npm",
-    "settings.editor.selected.configurable": "com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable",
-    "vue.rearranger.settings.migration": "true"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;Python.main.executor&quot;: &quot;Run&quot;,
+    &quot;Python.trial.executor&quot;: &quot;Run&quot;,
+    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,
+    &quot;git-widget-placeholder&quot;: &quot;master&quot;,
+    &quot;last_opened_file_path&quot;: &quot;D:/PycharmProjects&quot;,
+    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
+    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
+    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
+    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
+    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
+    &quot;settings.editor.selected.configurable&quot;: &quot;com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable&quot;,
+    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
   }
-}]]></component>
+}</component>
   <component name="RecentsManager">
     <key name="MoveFile.RECENT_KEYS">
       <recent name="D:\Thesis\phiflow_sim\trial_1" />
@@ -120,6 +121,7 @@
       <option name="presentableId" value="Default" />
       <updated>1724406942934</updated>
       <workItem from="1745559679201" duration="3708000" />
+      <workItem from="1745564807679" duration="4091000" />
     </task>
     <task id="LOCAL-00001" summary="Initial commit">
       <option name="closed" value="true" />
@@ -394,6 +396,7 @@
     <option name="LAST_COMMIT_MESSAGE" value="PPO and SAC implementation" />
   </component>
   <component name="com.intellij.coverage.CoverageDataManagerImpl">
+    <SUITE FILE_PATH="coverage/microswarm_simple$main.coverage" NAME="main Coverage Results" MODIFIED="1745568888223" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
     <SUITE FILE_PATH="coverage/phiflow_sim$main.coverage" NAME="main Coverage Results" MODIFIED="1745563192085" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
   </component>
 </project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"Black\">\r\n    <option name=\"sdkName\" value=\"phiflow-venv\" />\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"phiflow\" project-jdk-type=\"Python SDK\" />\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 53b720a1a2c62c983fc092b4abc2ff3acdf83c09)
+++ b/.idea/misc.xml	(date 1745566109318)
@@ -3,5 +3,5 @@
   <component name="Black">
     <option name="sdkName" value="phiflow-venv" />
   </component>
-  <component name="ProjectRootManager" version="2" project-jdk-name="phiflow" project-jdk-type="Python SDK" />
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.13 (microswarm_simple)" project-jdk-type="Python SDK" />
 </project>
\ No newline at end of file
